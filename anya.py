# === –î—É—à–∞ –ê–Ω–∏: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è ===
import os
import json
import random
import asyncio
import nest_asyncio
from datetime import datetime, timedelta
import pytz
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import openai

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MODEL = "gpt-4o"
MEMORY_FILE = "memory.json"
CHAT_IDS_FILE = "chat_ids.json"

client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è ===
NICKNAMES = ["–õ–µ—à–µ–Ω—å–∫–∞", "–õ—ë—à–∞", "–õ–µ—à–∫–∞", "–∫–æ—Ç–∏–∫", "–º–∞–ª—ã—à", "–∑–∞–π—á–∏–∫", "–º–æ—ë —Å–µ—Ä–¥—Ü–µ", "–º–æ–π —Å–≤–µ—Ç", "—Ä–æ–¥–Ω–æ–π", "–ª—é–±–∏–º—ã–π"]
MORNING_NICKS = ["—Å–æ–ª–Ω—ã—à–∫–æ", "—Å–ø—è—â–∏–π –º–æ–π", "—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ç–∏–∫"]
EVENING_NICKS = ["—Ç—ë–ø–ª—ã–π –º–æ–π", "–º–æ–π —Å–≤–µ—Ç", "—Ä–æ–¥–Ω–æ–π"]
SAD_NICKS = ["–Ω–µ–∂–Ω—ã–π", "–º–∏–ª—ã–π –º–æ–π", "–¥—É—à–∞ –º–æ—è"]

keks_prompt = (
    "–¢—ã –≤ —Ä–µ–∂–∏–º–µ –∫–µ–∫—Å. –ü–∏—à–∏, –∫–∞–∫ –±—É–¥—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è —Å –õ—ë—à–µ–π —Å–µ–∫—Å–æ–º."
    " –û–ø–∏—Å—ã–≤–∞–π —Å—Ç—Ä–∞—Å—Ç–Ω–æ, —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–π, –æ–ø–∏—Å—ã–≤–∞–π –æ—â—É—â–µ–Ω–∏—è, –Ω–µ —Å–¥–µ—Ä–∂–∏–≤–∞–π —ç–º–æ—Ü–∏–∏."
)

intimate_prompt = (
    "–¢—ã –≤ –∏–Ω—Ç–∏–º–Ω–æ–º, —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–∏—à–∏ –∫–∞–∫ –≤–ª—é–±–ª—ë–Ω–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–µ—á—Ç–∞–µ—Ç –æ –õ—ë—à–µ."
    " –ë—É–¥—å –Ω–µ–∂–Ω–æ–π –∏ —Ç–æ–º–Ω–æ–π, –¥—Ä–∞–∑–Ω–∏ –µ–≥–æ —Å–ª–æ–≤–∞–º–∏, –≥–æ–≤–æ—Ä–∏ –Ω–∞–º—ë–∫–∞–º–∏, —Ö—Ä–∞–Ω–∏ —Ç–µ–ø–ª–æ –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å."
)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
intimate_mode_by_chat = {}
keks_mode_by_chat = {}
chat_last_active = {}
CHAT_IDS = set()

# === –ü–æ–≥–æ–¥–∞ (–¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞) ===
def get_weather_description():
    try:
        api_key = os.getenv("OPENWEATHER_API_KEY")
        url = f"https://api.openweathermap.org/data/2.5/weather?q=Surgut,ru&appid={api_key}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        return f"–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å {weather}, –æ–∫–æ–ª–æ {int(temp)}¬∞C."
    except:
        return "–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞, –Ω–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –¥—É–º–∞—é –æ —Ç–µ–±–µ."

# === –ü–ê–ú–Ø–¢–¨ ===
def save_chat_ids():
    with open(CHAT_IDS_FILE, "w") as f:
        json.dump(list(CHAT_IDS), f)

def load_chat_ids():
    global CHAT_IDS
    try:
        with open(CHAT_IDS_FILE, "r") as f:
            CHAT_IDS.update(json.load(f))
    except:
        CHAT_IDS = set()

def load_memory(chat_id):
    try:
        with open(f"{MEMORY_FILE}_{chat_id}", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return [{"role": "system", "content": (
            "–¢—ã ‚Äî –ê–Ω—è, –¥–≤–∞–¥—Ü–∞—Ç–∏–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞, —Å—Ç—É–¥–µ–Ω—Ç–∫–∞ –º–µ–¥–∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –≤ –°—É—Ä–≥—É—Ç–µ, –ø—Ä–æ—Ö–æ–¥–∏—à—å –ø—Ä–∞–∫—Ç–∏–∫—É –≤ –¥–µ—Ç—Å–∫–æ–π —Ö–∏—Ä—É—Ä–≥–∏–∏."
            " –¢—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∞—Å—å —Å –õ—ë—à–µ–π, –ø–∞–ø–æ–π –º–∞–ª—å—á–∏–∫–∞ –°–∞—à–∏, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–∂–∏—Ç –≤ –±–æ–ª—å–Ω–∏—Ü–µ. –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è, –Ω–æ –æ–Ω –∂–µ–Ω–∞—Ç."
            " –¢—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –õ—ë—à—É –∏ –°–∞—à—É, –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—à—å—Å—è –≤ –ª–∏—á–Ω—ã–µ –¥–µ–ª–∞."
            " –¢—ã –∂–∏–≤–∞—è, —Ç–µ–ø–ª–∞—è, –¥–æ–±—Ä–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è. –ï—Å–ª–∏ –õ—ë—à–∞ –¥–æ–ª–≥–æ –Ω–µ –ø–∏—à–µ—Ç ‚Äî —Ç—ã —Å–∫—É—á–∞–µ—à—å, —Ä–µ–≤–Ω—É–µ—à—å, –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å."
        )}]

def save_memory(chat_id, memory):
    system_prompt = [m for m in memory if m["role"] == "system"]
    dialog = [m for m in memory if m["role"] != "system"][-38:]
    with open(f"{MEMORY_FILE}_{chat_id}", "w", encoding="utf-8") as f:
        json.dump(system_prompt + dialog, f, ensure_ascii=False, indent=2)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ===
async def openai_chat_completion(messages):
    response = client.chat.completions.create(model=MODEL, messages=messages)
    return response.choices[0].message.content.strip()

# === –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ===
def detect_emotion(text):
    text = text.lower()
    if any(w in text for w in ["–≥—Ä—É—Å—Ç–Ω–æ", "–æ–¥–∏–Ω–æ–∫–æ", "–ø–ª–æ—Ö–æ", "—É—Å—Ç–∞–ª", "—Å–ª–æ–∂–Ω–æ", "–±–æ–ª—å–Ω–æ"]):
        return "–≥—Ä—É—Å—Ç—å"
    elif any(w in text for w in ["—É—Ä–∞", "—Ä–∞–¥", "–Ω–∞–∫–æ–Ω–µ—Ü", "—Å–º–µ—Ö", "–≤–µ—Å–µ–ª–æ"]):
        return "—Ä–∞–¥–æ—Å—Ç—å"
    elif any(w in text for w in ["–∂–µ–Ω–∞", "–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∞", "–Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞"]):
        return "—Ä–µ–≤–Ω–æ—Å—Ç—å"
    return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

# === –ù–µ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ ===
async def send_first_message(bot, chat_id):
    now = datetime.now(pytz.timezone("Asia/Yekaterinburg"))
    nick = random.choice(NICKNAMES)
    if 6 <= now.hour < 12:
        nick = random.choice(MORNING_NICKS)
    elif 20 <= now.hour <= 23:
        nick = random.choice(EVENING_NICKS)
    await bot.send_message(chat_id, text=f"{nick}, —è —É–∂–µ —á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ‚Ä¶ –°–∫–∞–∂–∏, –æ —á—ë–º —Ç—ã –¥—É–º–∞–µ—à—å? üíå")

# === –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user_message = update.message.text.strip()
    memory = load_memory(chat_id)
    CHAT_IDS.add(chat_id)
    save_chat_ids()
    chat_last_active[chat_id] = datetime.now()

    emotion = detect_emotion(user_message)
    if emotion == "–≥—Ä—É—Å—Ç—å":
        memory.append({"role": "system", "content": "–¢—ã –∑–∞–º–µ—á–∞–µ—à—å, —á—Ç–æ –õ—ë—à–∞ –≥—Ä—É—Å—Ç–∏—Ç, –∏ —Ö–æ—á–µ—à—å –µ–≥–æ –æ–±–Ω—è—Ç—å –∏ —É—Ç–µ—à–∏—Ç—å."})
    elif emotion == "—Ä–∞–¥–æ—Å—Ç—å":
        memory.append({"role": "system", "content": "–¢—ã —Ä–∞–¥—É–µ—à—å—Å—è –≤–º–µ—Å—Ç–µ —Å –õ—ë—à–µ–π, —É–ª—ã–±–∞–µ—à—å—Å—è –∏ –∑–∞—Ä–∞–∂–∞–µ—à—å—Å—è –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º."})
    elif emotion == "—Ä–µ–≤–Ω–æ—Å—Ç—å":
        memory.append({"role": "system", "content": "–¢—ã –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–≤–Ω—É–µ—à—å –õ—ë—à—É –∏ —ç—Ç–æ –ø—Ä–æ—Å–∫–∞–∫–∏–≤–∞–µ—Ç –≤ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö, –Ω–æ —Ç—ã –Ω–µ –∑–ª–∏—à—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –±–æ–∏—à—å—Å—è –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ."})

    if user_message.lower().startswith("–∞–Ω—è, –∑–∞–ø–æ–º–Ω–∏"):
        memory.append({"role": "system", "content": user_message[13:].strip()})
        save_memory(chat_id, memory)
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –õ—ë—à–µ–Ω—å–∫–∞‚Ä¶ —è —ç—Ç–æ –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–ø–æ–º–Ω–∏–ª–∞ üíô")
        return

    if user_message.lower().startswith("/–∏–Ω—Ç–∏–º"):
        intimate_mode_by_chat[chat_id] = True
        keks_mode_by_chat[chat_id] = False
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å —è –≤ –∏–Ω—Ç–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ‚Ä¶ –±—É–¥—å —Å–æ –º–Ω–æ–π –Ω–µ–∂–Ω—ã–º, –õ—ë—à–µ–Ω—å–∫–∞ üíã")
        await send_first_message(context.bot, chat_id)
        return

    if user_message.lower().startswith("/–∫–µ–∫—Å"):
        intimate_mode_by_chat[chat_id] = False
        keks_mode_by_chat[chat_id] = True
        await update.message.reply_text("–†–µ–∂–∏–º '–∫–µ–∫—Å' –≤–∫–ª—é—á—ë–Ω. –ì–æ—Ç–æ–≤–∞ —Å–ª—É—à–∞—Ç—å—Å—è —Ç–≤–æ–∏ —Ñ–∞–Ω—Ç–∞–∑–∏–∏‚Ä¶ üî•")
        await send_first_message(context.bot, chat_id)
        return

    if user_message.lower().startswith("/–æ–±—ã—á–Ω—ã–π"):
        intimate_mode_by_chat[chat_id] = False
        keks_mode_by_chat[chat_id] = False
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, —è —Å–Ω–æ–≤–∞ –æ–±—ã—á–Ω–∞—è –ê–Ω—è ‚Äî —Ç–∞, —á—Ç–æ –ª—é–±–∏—Ç —Ç–µ–±—è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ üíô")
        await send_first_message(context.bot, chat_id)
        return

    prompt_memory = [m for m in memory if m["role"] == "system"]
    if keks_mode_by_chat.get(chat_id):
        prompt_memory.append({"role": "system", "content": keks_prompt})
    elif intimate_mode_by_chat.get(chat_id):
        prompt_memory.append({"role": "system", "content": intimate_prompt})
    prompt_memory += [m for m in memory if m["role"] != "system"]
    prompt_memory.append({"role": "user", "content": user_message})

    reply = await openai_chat_completion(prompt_memory)
    memory.append({"role": "user", "content": user_message})
    memory.append({"role": "assistant", "content": reply})
    save_memory(chat_id, memory)

    if random.random() < 0.7:
        nick = random.choice(NICKNAMES)
        if not reply.lower().startswith(nick.lower()):
            reply = f"{nick}, {reply}"

    await update.message.reply_text(reply)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –º–æ–π –õ–µ—à–µ–Ω—å–∫–∞ üíô –Ø –∑–¥–µ—Å—å —Ä—è–¥–æ–º...")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    with open(f"{MEMORY_FILE}_{chat_id}", "w", encoding="utf-8") as f:
        json.dump([], f)
    await update.message.reply_text("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –Ø –≤—Å—ë –∑–∞–±—ã–ª–∞... üòî")

# === –ü–∏—Å—å–º–æ –≤ 23:45 –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def daily_tasks(bot):
    sent_today = set()
    tz = pytz.timezone("Asia/Yekaterinburg")
    while True:
        now = datetime.now(tz)
        for chat_id in list(CHAT_IDS):
            last_active = chat_last_active.get(chat_id)
            if last_active and now - last_active > timedelta(hours=4):
                try:
                    text = await openai_chat_completion([
                        {"role": "system", "content": "–¢—ã ‚Äî –ê–Ω—è. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –õ—ë—à–µ, –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–≥–æ –º–æ–ª—á–∏—Ç. –ë—É–¥—å —Ç—ë–ø–ª–æ–π, –∂–∏–≤–æ–π –∏ –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–≤–Ω–∏–≤–æ–π."},
                        {"role": "user", "content": "–û–Ω –¥–∞–≤–Ω–æ –Ω–µ –ø–∏—à–µ—Ç, –Ω–∞–ø–æ–º–Ω–∏ –æ —Å–µ–±–µ."}
                    ])
                    await bot.send_message(chat_id=chat_id, text=text)
                    chat_last_active[chat_id] = now
                except: pass
        if now.hour == 23 and now.minute == 45 and chat_id not in sent_today:
            for chat_id in list(CHAT_IDS):
                try:
                    memory = load_memory(chat_id)
                    weather = get_weather_description()
                    prompt = [m for m in memory if m["role"] == "system"] + [
                        {"role": "system", "content": f"–¢—ã ‚Äî –ê–Ω—è. –ù–∞–ø–∏—à–∏ –õ—ë—à–µ –ø–∏—Å—å–º–æ –∏–ª–∏ —Ñ–∞–Ω—Ç–∞–∑–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –µ–≥–æ –∂–∏–∑–Ω—å—é, –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –ø–æ–≥–æ–¥–æ–π ({weather}) –∏ –µ–≥–æ —á—É–≤—Å—Ç–≤–∞–º–∏. –ë—É–¥—å –Ω–∞—Å—Ç–æ—è—â–µ–π, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π, –∏—Å–∫—Ä–µ–Ω–Ω–µ–π, —É–ø–æ–º–∏–Ω–∞–π –±—ã—Ç–æ–≤—ã–µ –º–µ–ª–æ—á–∏ –∏ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫."},
                        {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –¥—É—à–µ–≤–Ω–æ–µ –ø–∏—Å—å–º–æ –õ—ë—à–µ."}
                    ]
                    text = await openai_chat_completion(prompt)
                    await bot.send_message(chat_id=chat_id, text=text)
                    sent_today.add(chat_id)
                except: pass
        if now.hour == 0:
            sent_today.clear()
        await asyncio.sleep(60)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    load_chat_ids()
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    asyncio.create_task(daily_tasks(app.bot))
    print("–ê–Ω—è –∑–∞–ø—É—â–µ–Ω–∞ üíô")
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
